"""
:module: eqc_utils.eventbank
:auth: Nathan T. Stevens
:email: ntsteven@uw.edu
:org: Pacific Northwest Seismic Network
:license: GPLv3
:purpose:
    This module extends functionalites of the ObsPlus
    :class:`~obsplus.bank.eventbank.EventBank` class
    in a manner consistent with their GPLv3 licensing.
    see: https://github.com/niosh-mining/obsplus

"""

import fnmatch, os
import obspy
from obsplus import EventBank
from obsplus.bank.eventbank import compose_docstring
from obsplus.constants import get_events_parameters

class EventBank(EventBank):
    """An extension of the :class:`~obsplus.bank.eventbank.EventBank` class
    adding the ability to use Unix wildcard style strings for the
    :meth:`~obsplus.bank.eventbank.EventBank.read_index` method and adds the
    COMCAT Event ID as the index of dataframes generated by `read_index`

    Parameters
    ----------
    :param EventBank: _description_
    :type EventBank: _type_
    """    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)

    @compose_docstring(get_events_params=get_events_parameters)
    def read_index(self, **options):
        """An augmentation of the :meth:`~obsplus.bank.eventbank.EventBank.read_index`
        method (and by extension the :meth:`~.get_event_summary` method).
        
        Augmentations
        -------------
        - Index is assigned to numeric EVID's that are taken as the last
          `/`-delimited element of **event_id** for each event in the EventBank
          and the agency_id.lower()
          e.g., 'quakeml:uw.anss.org/Event/UW/60593167'
           becomes: 'uw60593167'
          This conforms to the nomenclature in the US Geological Survey
          Comprehensive Catalog (COMCAT).

        Parameters
        ----------
        {get_events_params}

        """
        # Restrict access to COMCAT_ID as a search parameter & provide hint
        if 'COMCAT_ID' in options:
            raise ValueError('use `event_id` column entries to fetch subset events by EVID')

        # Enable wildcard search for event_id
        # If event_id is in **options
        if 'event_id' in options:
            # If event_id's value is a string
            if isinstance(options['event_id'], str):
                # if that string has wildcard character(s) present
                if '?' in options['event_id'] or '*' in options['event_id']:
                    # pop the event_id entry off options
                    wild_entry = options.pop('event_id')
                    # run everyting else as normal
                    df = super().read_index(**options)
                    event_id=fnmatch.filter(df.event_id.values, wild_entry)
                    options.update({'event_id': event_id})

        # Run as normal
        df = super().read_index(**options)
                    
        # Update index with COMCAT_ID
        df.index = [row.agency_id.lower() + row.event_id.split('/')[-1] for _, row in df.iterrows()]
        # Update index name
        df.index.name = 'COMCAT_ID'
                    
        return df

# Helper Methods

def initialize_event_bank(catalog = None,
                          base_path = os.path.join('.','EventBank'),
                          path_structure = '{year}/{month}',
                          name_structure = 'uw{event_id_end}',
                          **options):
    """Simple wrapper script for :meth:`~obsplus.bank.eventbank.EventBank.__init__`
    that provides some alternative default inputs for PNSN projects and allows
    for a

    :param catalog: catalog of event metadata to add to this EventBank, defaults to None
    :type catalog: obspy.core.event.Catalog, optional
    :param base_path: root directory location the EventBank, defaults to os.path.join('.','EventBank')
    :type base_path: str, optional
    :param path_structure: directory structure for the EventBank files, defaults to '{year}/{month}'
    :type path_structure: str, optional
    :param name_structure: file naming structure for the EventBank, defaults to 'uw{event_id_end}'
    :type name_structure: str, optional
    :return:
     - **ebank** (*obsplus.bank.eventbank.EventBank*) -- initialized event bank
    """    
    ebank = EventBank(base_path=base_path,
                      path_structure=path_structure,
                      name_structure=name_structure,
                      **options)
    if isinstance(catalog, obspy.core.event.Catalog):
        ebank.put_events(catalog)
    return ebank
    


def connect_to_eventbank(
    base_path=os.path.join('.','EventBank'),
    path_structure='{year}/{month}',
    name_structure='uw{event_id_end}'):
    """Establish a connection to an Obsplus EventBank client
    
    :param base_path: path to the root directory of the EventBank (or where it will be hosted),
        defaults to os.path.join('.','EventBank').
    :type base_path: str, optional
    :param path_structure: path_structure format for a :class:`~obsplus.bank.EventBank`,
        defaults to '{year}/{month}'
    :type path_structure: str, optional
    :param name_structure: naming format for XML objects in the EventBank,
        defaults to 'uw{event_id_end}'. This produces files/entries named uw#########.xml
        that matches the event ID string used in the USGS COMCAT
        - also see :meth:`~libcomcat.search.get_event_by_id`
    :type name_structure: str, optional
    :param events_to_add: events to add to this EventBank via the :meth:`~obsplus.bank.eventbank.EventBank.put_events` method,
        defaults to None.
    :type events_to_add: see below, optional
        - None -- skip the add events step
        - str -- name of a QuakeML file to be loaded via :meth:`~obspy.read_events` and added to the initialized EventBank
        - :class:`~obspy.core.event.Event` -- attempts to directly add to the initialized EventBank 
        - :class:`~obspy.core.event.Catalog` -- attempts to directly add to the initialized EventBank
    :param options: Additional key-word argument collector passed to the EventBank initialization
        Supported kwargs: format, ext, executor
        - see documentation for class :class:`~obsplus.bank.eventbank.EventBank` for more info

    :return: 
     - **ebank** (*obsplus.EventBank*) - initialized eventbank client
    
    """    
    ebank = EventBank(base_path=base_path,
                      path_structure=path_structure,
                      name_structure=name_structure)
    return ebank